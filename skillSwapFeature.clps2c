set addNewCaseSkillSwap 0x009D6C00
set addSquareButtonBehaviour 0x009D6C40

set skillSwapHandler 0x009D6CB0

// GLOBALS //
// 0x009D6BD0 -> Skill A Super Index
// 0x009D6BD2 -> Skill A Sub Index

// 0x009D6BD8 -> First skill swap chosen
// 0x009D6BDC -> Current persona quick access
// 0x009D6BE0 -> Super Index
// 0x009D6BE4 -> Sub Index
// 0x009D6BE8 -> Current persona number of next skill list
// 0x009D6BEC -> Draw skill swap elements flag
// 0x009D6BF0 -> Temporal current persona next skill list
// GLOBALS //

ASM_START 0x001311f0
    j 0x009D6C00
    lw $s0, 0x3c($a0)
ASM_END

ASM_START addNewCaseSkillSwap
    lw $v0, 0x0($s0)
    li $v1, 0x10
    beq $v0, $v1, skillSwapHandler
    nop
    j 0x001311f8
    nop
    skillSwapHandler: j 0x009D6CB0
    nop
ASM_END


ASM_START 0x0013243c
    j 0x009D6C40
    lui $v0, 0x7e
ASM_END

ASM_START addSquareButtonBehaviour
    lhu $a0, 0x094e($v0)
    andi $v0, $a0, 0x80
    beq $v0, $zero, squareNotPressed
    nop

    li $a0, 0x0
    li $a1, 0x0
    li $a2, 0x0
    li $a3, 0x1
    jal 0x0010a4e0 // Play square sound
    nop

    li $v0, 0x10
    sw $v0, 0x0($s0) // Store new case for our skill swap

    j 0x00132648
    nop
    squareNotPressed: j 0x00132444
    nop
ASM_END


ASM_START skillSwapHandler
    li $v1, 0x1
    lui $v0, 0x009D
    sh $v1, 0x6BEC($v0) // Set flag to draw skill swap elements
    
    lui $v0, 0x7e
    lhu $a0, 0x094e($v0)
    andi $v0, $a0, 0x20
    beq $v0, $zero, backNotPressed
    nop

    li $a0, 0x0
    li $a1, 0x0
    li $a2, 0x0
    li $a3, 0x2
    jal 0x0010a4e0 // Play back sound
    nop

    lui $a0, 0x009D
    lw $v0, 0x6BD8($a0)
    beq $v0, $zero, resetGlobals
    nop

    sw $zero, 0x6BD8($a0) // Reset swap first chosen skill swap

    lh $v0, 0x6BD0($a0) // Get skill A super index
    lh $v1, 0x6BD2($a0) // Get skill A sub index

    sh $v0, 0x6BE0($a0) // Go back to the previously selected super index
    sh $v1, 0x6BE4($a0) // Go back to the previously selected sub index

    sw $zero, 0x6BD0($a0) // Reset skill A super/sub index

    beq $zero, $zero, continuePersonaInfoDraw
    nop

    resetGlobals: lui $a0, 0x009D
    addiu $a0, $a0, 0x6BD0 // Globals pointer
    li $a1, 0x0
    li $a2, 0x30
    jal 0x00521408 // Reset all globals when going back
    nop

    li $v0, 0x8
    sw $v0, 0x0($s0) // Store persona info case

    beq $zero, $zero, continuePersonaInfoDraw
    nop

    backNotPressed: lw $a0, 0x4($s0) 
    jal 0x00174a90 // Get current persona we are viewing
    nop
    move $a0, $v0
    lui $a2, 0x009D
    sw $a0, 0x6BDC($a2) // Store current persona for quick access later
    addiu $a1, $a2, 0x6BF0
    addiu $a2, $a2, 0x6BE8
    jal 0x001fb1f0
    nop

    lui $v0, 0x7e
    lhu $a0, 0x094e($v0)
    andi $v0, $a0, 0x40
    beq $v0, $zero, swapConfirmNotPressed
    nop

    li $v0, 0x2
    lui $v1, 0x009D
    lh $v1, 0x6BE0($v1) // Load super index
    bne $v0, $v1, continueSwapChecks
    nop

    wrongInputPath: li $a0, 0x0
    li $a1, 0x0
    li $a2, 0x0
    li $a3, 0x8
    jal 0x0010a4e0 // Play wrong sound when index is next skill
    nop

    beq $zero, $zero, continuePersonaInfoDraw
    nop

    continueSwapChecks: lui $a0, 0x009D
    lw $a2, 0x6BDC($a0) // Load current persona
    lh $v1, 0x6BE0($a0) // Load super index
    sll $v1, $v1, 0x2
    lh $v0, 0x6BE4($a0) // Load sub index
    addu $v0, $v0, $v1 // Get total persona skill offset
    sll $v0, $v0, 0x1 // Convert it to half offset for skill array
    addiu $v1, $a2, 0xc // Get to the start of the skill array
    addu $a1, $v0, $v1 // Current skill address
    lhu $a2, 0x0($a1) // Get current skill half

    beq $a2, $zero, wrongInputPath // Skill is blank so its not choosable
    nop

    lui $a0, 0x009D
    lw $v0, 0x6BD8($a0)
    bne $v0, $zero, alreadyChoseSkill
    nop
    
    lh $v0, 0x6BE0($a0)
    sh $v0, 0x6BD0($a0) // Store current super index to skill swap A super index

    lh $v0, 0x6BE4($a0)
    sh $v0, 0x6BD2($a0) // Store current sub index to skill swap A sub index

    li $v0, 0x1
    sw $v0, 0x6BD8($a0)

    beq $zero, $zero, playConfirmSound
    nop
    
    alreadyChoseSkill: lh $v0, 0x6BE0($a0) // Get current selected super index
    lh $v1, 0x6BD0($a0) // Get current skill A super index

    bne $v0, $v1, isDifferentPosition
    nop

    lh $v1, 0x6BE4($a0) // Get current selected sub index
    lh $v0, 0x6BD2($a0) // Get current skill A sub index

    beq $v1, $v0, wrongInputPath
    nop

    isDifferentPosition: lui $a0, 0x009D
    lw $a3, 0x6BDC($a0) // Load current persona
    lh $v1, 0x6BD0($a0) // Load skill A super index
    sll $v1, $v1, 0x2
    lh $v0, 0x6BD2($a0) // Load sub index
    addu $v0, $v0, $v1 // Get total persona skill offset
    sll $v0, $v0, 0x1 // Convert it to half offset for skill array
    addiu $v1, $a3, 0xc // Get to the start of the skill array
    addu $v0, $v0, $v1 // Current skill address
    lhu $v1, 0x0($v0) // Get current skill half

    sh $v1, 0x0($a1) // Store current skill into previous selected skill
    sh $a2, 0x0($v0) // Store previous selected skill into current skill

    addiu $a0, $a0, 0x6BD0
    li $a1, 0x0
    li $a2, 0xC
    jal 0x00521408 // Reset all swap global values
    nop

    playConfirmSound: li $a0, 0x0
    li $a1, 0x0
    li $a2, 0x0
    li $a3, 0x1
    jal 0x0010a4e0 // Play confirm swap sound
    nop

    beq $zero, $zero, continuePersonaInfoDraw
    nop
    
    swapConfirmNotPressed: lui $v0, 0x007e
    lhu $a2, 0x095A($v0)
    andi $v1, $a2, 0x4000
    bne $v1, $zero, downPressed
    nop
    lhu $a1, 0x0952($v0)
    andi $v1, $a1, 0x4000
    beq $v1, $zero, downNotPressed
    nop
    // DOWN BEHAVIOUR

    downPressed: lui $a0, 0x009D
    lh $v0, 0x6BE0($a0) // Get super index
    li $v1, 0x2
    beq $v0, $v1, continuePersonaInfoDraw
    nop

    li $a0, 0x0
    li $a1, 0x0
    li $a2, 0x0
    li $a3, 0x0
    jal 0x0010a4e0 // Play move sound
    nop

    lui $a0, 0x009D
    lh $v0, 0x6BE4($a0) // Get sub index
    li $v1, 0x3
    beq $v0, $v1, lastSubIndex
    li $v1, 0x0
    addiu $v1, $v0, 0x1
    lastSubIndex: sw $v1, 0x6BE4($a0)

    beq $zero, $zero, continuePersonaInfoDraw
    nop

    downNotPressed: andi $v1, $a2, 0x1000
    bne $v1, $zero, upPressed
    nop 
    andi $v1, $a1, 0x1000
    beq $v1, $zero, upNotPressed
    nop 
    // UP BEHAVIOUR

    upPressed: lui $a0, 0x009D
    lh $v0, 0x6BE0($a0) // Get super index
    li $v1, 0x2
    beq $v0, $v1, continuePersonaInfoDraw
    nop

    li $a0, 0x0
    li $a1, 0x0
    li $a2, 0x0
    li $a3, 0x0
    jal 0x0010a4e0 // Play move sound
    nop

    lui $a0, 0x009D
    lh $v0, 0x6BE4($a0) // Get sub index
    li $v1, 0x0
    beq $v0, $v1, firstSubIndex
    li $v1, 0x3
    addiu $v1, $v0, -0x1
    firstSubIndex: sw $v1, 0x6BE4($a0)

    beq $zero, $zero, continuePersonaInfoDraw
    nop

    upNotPressed: andi $v1, $a2, 0x8000
    bne $v1, $zero, leftPressed
    nop 
    andi $v1, $a1, 0x8000
    beq $v1, $zero, leftNotPressed
    nop 
    // LEFT BEHAVIOUR

    leftPressed: li $a0, 0x0
    li $a1, 0x0
    li $a2, 0x0
    li $a3, 0x0
    jal 0x0010a4e0 // Play move sound
    nop

    lui $a0, 0x009D
    lh $v0, 0x6BE0($a0) // Get super index
    li $v1, 0x0
    beq $v0, $v1, firstSuperIndex
    nop
    addiu $v1, $v0, -0x1
    beq $zero, $zero, saveLeftSuperIndex
    nop
    firstSuperIndex: lh $v0, 0x6BE8($a0) // Get next number of skills
    bne $v0, $zero, saveLeftSuperIndex
    li $v1, 0x2
    li $v1, 0x1
    saveLeftSuperIndex: sw $v1, 0x6BE0($a0)

    beq $zero, $zero, continuePersonaInfoDraw
    nop

    leftNotPressed: andi $v1, $a2, 0x2000
    bne $v1, $zero, rightPressed
    nop 
    andi $v1, $a1, 0x2000
    beq $v1, $zero, continuePersonaInfoDraw
    nop 
    // RIGHT BEHAVIOUR

    rightPressed: li $a0, 0x0
    li $a1, 0x0
    li $a2, 0x0
    li $a3, 0x0
    jal 0x0010a4e0 // Play move sound
    nop

    lui $a0, 0x009D
    lh $v0, 0x6BE0($a0) // Get super index
    lh $a1, 0x6BE8($a0) // Get next number of skills
    beq $a1, $zero, decideLastValue
    li $v1, 0x1
    li $v1, 0x2
    decideLastValue: beq $v0, $v1, lastSuperIndex
    li $v1, 0x0
    addiu $v1, $v0, 0x1
    lastSuperIndex: sw $v1, 0x6BE0($a0)

    beq $zero, $zero, continuePersonaInfoDraw
    nop

    continuePersonaInfoDraw: j 0x00132648
    nop
ASM_END